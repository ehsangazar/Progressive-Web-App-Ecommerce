"use strict";

exports.__esModule = true;
exports.default = void 0;

var _template = _interopRequireDefault(require("@babel/template"));

var t = _interopRequireWildcard(require("@babel/types"));

var _Symbols = require("../utils/Symbols");

var _buildTaggedTemplate = _interopRequireDefault(require("../utils/buildTaggedTemplate"));

var _createStyleNode = _interopRequireDefault(require("../utils/createStyleNode"));

var _getDisplayName = _interopRequireDefault(require("../utils/getDisplayName"));

var _isCssTag = _interopRequireDefault(require("../utils/isCssTag"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const buildImport = (0, _template.default)('require(FILENAME);');

function buildStyleRequire(path, opts) {
  const {
    tagName
  } = opts.pluginOptions;
  const {
    styles
  } = opts.file.get(_Symbols.STYLES);
  const nodeMap = opts.file.get(_Symbols.COMPONENTS);
  const style = (0, _createStyleNode.default)(path, (0, _getDisplayName.default)(path, opts), opts);
  style.code = `require('${style.relativeFilePath}')`;
  const {
    text,
    imports
  } = (0, _buildTaggedTemplate.default)({
    quasiPath: path.get('quasi'),
    nodeMap,
    style,
    useCssProperties: false,
    ...opts.pluginOptions
  });
  style.value = `${imports}${text}`;
  if (styles.has(style.absoluteFilePath)) throw path.buildCodeFrameError(path.findParent(p => p.isExpressionStatement()) ? `There are multiple anonymous ${tagName} tags that would conflict. Differentiate each tag by assigning the output to a unique identifier` : `There are multiple ${tagName} tags with the same inferred identifier. Differentiate each tag by assigning the output to a unique identifier`);
  styles.set(style.absoluteFilePath, style);
  const runtimeNode = buildImport({
    FILENAME: t.StringLiteral(style.relativeFilePath)
  });
  nodeMap.set(runtimeNode.expression, style);
  return runtimeNode;
}

var _default = {
  TaggedTemplateExpression(path, state) {
    const pluginOptions = state.defaultedOptions;
    const tagPath = path.get('tag');

    if ((0, _isCssTag.default)(tagPath, pluginOptions)) {
      path.replaceWith(buildStyleRequire(path, {
        pluginOptions,
        file: state.file
      }));
    }
  }

};
exports.default = _default;